---
title: "matplotlib demo"
format:
  html:
    code-fold: true
    embed-resources: true
jupyter: python3
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import matplotlib.pyplot as plt
import pandas as pd
import json

# dataset 1

# dataset 1
url1 = "https://raw.githubusercontent.com/JosephBARBIERDARNAL/data-matplotlib-journey/main/storms/storms.csv"
import matplotlib.pyplot as plt
import pandas as pd



# dataset 2
url2 = "https://raw.githubusercontent.com/JosephBARBIERDARNAL/data-matplotlib-journey/refs/heads/main/footprint/footprint.csv"


# dataset 3
url3= "https://raw.githubusercontent.com/JosephBARBIERDARNAL/data-matplotlib-journey/refs/heads/main/mariokart/mariokart.csv"

df_storms = pd.read_csv(url1)
df_footprint = pd.read_csv(url2)
df_marioKart = pd.read_csv(url3)


url4 = "https://raw.githubusercontent.com/JosephBARBIERDARNAL/data-matplotlib-journey/refs/heads/main/natural-disasters/natural-disasters.csv"
df_desasters = pd.read_csv(url4)
print(plt.rcParams.keys())

```

## Visualisation Stroms data
## line plot





```{python}
import matplotlib.pyplot as plt

# Supposons que df_storms existe déjà

total_year = df_storms.groupby('year')["n"].sum()
grouped = df_storms.groupby("status")
df_storms_max = df_storms.sort_values(['status', 'n'], ascending=[True, False]) \
           .drop_duplicates(subset='status') \
           [['status', 'year', 'n']]
fig, ax = plt.subplots()

params = {
    "title": "Annual numbers of storms by status",
    "xlabel": "Year",
    "ylabel": "Number of storms",
    "xlim": [2010, 2022], 
    #"ylim": [0,400],
    "spines": {
        "top": False,
        "right": False
    },
    "ticks": {
        "top": False,
        "right": False
    },
    "legend": {
        "loc": "upper left",
        "frameon": False
    }
}

lines = []
nudge_y = [5,-8,5,5]
nudge_x = [0,0,0,0]
# Tracer les groupes
for i, (status, df_grouped) in enumerate(grouped):
    df_value = df_grouped.sort_values(["n"], ascending=[False]).head(1)
    line, = ax.plot(df_grouped["year"], df_grouped["n"], label=status.capitalize())
    lines.append(line)  # stocker l'objet Line2D
    ax.text(df_value["year"].iloc[0] + nudge_x[i],df_value["n"].iloc[0] + nudge_y[i], f"{int(df_value.iloc[0]["n"])}", color = line.get_color())
    

# Handlers pour appliquer les paramètres
handlers = {
    "title":   {"func": ax.set_title,  "kind": "single"},
    "xlabel":  {"func": ax.set_xlabel, "kind": "single"},
    "ylabel":  {"func": ax.set_ylabel, "kind": "single"},
    "xlim":    {"func": ax.set_xlim,   "kind": "args"},
    "ylim":    {"func": ax.set_ylim,   "kind": "args"},
    "legend":  {"func": ax.legend,     "kind": "kwargs"},
    "ticks":   {"func": ax.tick_params,"kind": "kwargs"}
}

legend = None  # pour pouvoir accéder à l’objet ensuite si nécessaire

for key, conf in handlers.items():
    if key in params:
        value = params[key]
        kind = conf["kind"]
        func = conf["func"]
        
        if kind == "single":
            func(value)
        elif kind == "args":
            func(*value)
        elif kind == "kwargs":
            result = func(**value)
            if key == "legend":
                legend = result  # capturer l'objet Legend

# Gérer les spines
for spine, visible in params.get("spines", {}).items():
    ax.spines[spine].set_visible(visible)

# Couleur du texte = couleur de la ligne
# Appliquer la couleur de la courbe au texte de la légende
for text, line in zip(legend.get_texts(), lines):
    text.set_color(line.get_color())

ymin, _ = ax.get_ylim()  # récupérer le min actuel
ax.set_ylim(ymin, 400)
ax.set_xticks(list(range(2010, 2023))) 
#plt.xticks(rotation=90)  # ou 90 si besoin
ax.tick_params(axis='x', labelsize=8)
plt.show()
```

je veux boxplot des lifexp par region
```{python}
df_clean = df_footprint.dropna(subset=["lifexp"])
region_means = df_clean.groupby("region")["lifexp"].mean()
regions_sorted = region_means.sort_values().index.tolist()

values = [df_clean[df_clean["region"] == region]["lifexp"] for region in regions_sorted]
fig, ax = plt.subplots()
params = {
    "title": "Life Esperance by region",
    "xlabel": "Years",
    "spines": {
        "top": False,
        "right": False,
        "left":False
    },
    "ticks": {
        "top": False,
        "right": False,
        "left":False
    }
}


# Handlers pour appliquer les paramètres
handlers = {
    "title":   {"func": ax.set_title,  "kind": "single"},
    "xlabel":  {"func": ax.set_xlabel, "kind": "single"},
    "ylabel":  {"func": ax.set_ylabel, "kind": "single"},
    "xlim":    {"func": ax.set_xlim,   "kind": "args"},
    "ylim":    {"func": ax.set_ylim,   "kind": "args"},
    "legend":  {"func": ax.legend,     "kind": "kwargs"},
    "ticks":   {"func": ax.tick_params,"kind": "kwargs"}
}

legend = None  # pour pouvoir accéder à l’objet ensuite si nécessaire

for key, conf in handlers.items():
    if key in params:
        value = params[key]
        kind = conf["kind"]
        func = conf["func"]
        
        if kind == "single":
            func(value)
        elif kind == "args":
            func(*value)
        elif kind == "kwargs":
            result = func(**value)
            if key == "legend":
                legend = result  # capturer l'objet Legend

# Gérer les spines
for spine, visible in params.get("spines", {}).items():
    ax.spines[spine].set_visible(visible)





ax.boxplot(values, labels = regions_sorted, vert = False)
plt.show()
```

import matplotlib.colors as mcolors

hsv_color = (0.01, .4, .8)
rgb_color = mcolors.hsv_to_rgb(hsv_color)

from pypalettes import load_cmap


```{python}
import pandas as pd

import matplotlib.pyplot as plt


pivot_df = df_storms.pivot_table(
  index="year",  # year is now the index
  columns="status",  # column are the kind of storm
  values="n",  # df content is taken from the 'n' column
)

fig, ax = plt.subplots()

for status in pivot_df["status"].unique():
  if status == "tropical storm":
      color = "#b75050"
  else:
      color = "lightgrey"
  ax.plot(pivot_df.index, pivot_df[status], color=color)

plt.show()
```


```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pypalettes import load_cmap




x = df_storms["year"].astype(int)
y = df_storms["n"]
c = df_storms["status"]
df_sum = df_storms.groupby("year", as_index=False)[["n"]].sum()

cmap = load_cmap("Acadia")

fig, ax = plt.subplots()
sns.lineplot(
  x=x, y=y, hue=c,
  palette=cmap.colors,
  ax=ax
)
plt.show()
```

![Elephant](chart_to_replicate.png)


```{python}
import matplotlib.pyplot as plt

    # Example using a list of lists
mosaic = [['A', 'A'],['A', 'A'],
              ['C', 'C'],
              ['C','C'],['C','C'],
              ['C','C']]

    # Example using string shorthand
    # mosaic = "AAB;CDB"
colors = ["green", "blue","orange","red"]
fig, axs = plt.subplot_mosaic(mosaic,sharex=True)
sns.lineplot(
  x=x, y=y, hue=c,
  palette=colors,
  ax=axs['C']
)
axs['C'].legend().remove()
bars = axs["A"].bar(df_sum["year"].astype(int),df_sum["n"])
axs["C"].spines[["top", "right"]].set_visible(False)
axs["A"].spines[["top", "right","left","bottom"]].set_visible(False)
axs["A"].set_yticklabels([])
#axs["A"].set_xticklabels([])
axs['A'].tick_params(
    axis='both',
    length=0,
    labelright=False # enlève les labels à droite
)

for i, bar in enumerate(bars):
    height = bar.get_height()
    axs["A"].text(
        bar.get_x() + bar.get_width() / 2,  # centre de la barre
        height - (height * 0.1),                         # position au milieu de la 
        f'{int(height)}',                   # texte à afficher
        ha='center',
        va='top',                        # centre vertical
        color='white',                      # lisible si fond sombre
        fontsize=10
    )
axs['C'].text(2012,300,c[2].capitalize(),color =colors[2])
axs['C'].text(2010,165,c[0].capitalize(),color =colors[0])
axs['C'].text(2016,25,c[3].capitalize(),color =colors[3])
axs['C'].text(2010,80,c[1].capitalize(),color =colors[1])
axs['A'].text(2015,650,"Total by Year", color="blue")
axs['C'].text(2015,340,"Total by Year")
fig.subplots_adjust(wspace=.1, hspace=.1)
fig.text(0.05,0.9,"Annual Storms")
plt.show()
```
```{python}
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from pypalettes import load_cmap

df = df_desasters.copy()

columns = df.drop(columns="Year").sum().sort_values().index.to_list()
x = df["Year"]
y = np.stack(df[columns].values, axis=-1)

fig, ax = plt.subplots(figsize=(10, 5))

#stacked lineplot

ax.stackplot(x, y, labels=columns)
ax2 = ax.twinx()
ax.spines[["top", "left"]].set_visible(False)
ax2.spines[["top", "left"]].set_visible(False)

ax.set_xlim(1960, 2023)

ax.tick_params(
    axis='y',
    length=0,
    labelright=False # enlève les labels à droite
)
ax.set_title("Evolution of natural disasters", loc='left')
ax.set_yticklabels([])
ax2.set_ylim(ax.get_ylim())
ax.legend(loc="upper left", frameon=False)
plt.show()
# Here goes your code
```


```{python}
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from pypalettes import load_cmap



columns = df.drop(columns="Year").sum().sort_values().index.to_list()
x = df["Year"]
y = np.stack(df[columns].values, axis=-1)

fig, ax = plt.subplots(figsize=(10, 5))

colors = load_cmap("Antique").colors

ax.stackplot(x, y, colors=colors, labels=columns)
ax.set_xlim(1960, 2023)
ax.spines[["top", "left"]].set_visible(False)
ax.yaxis.tick_right()
ax.text(
   x=1960,
   y=380,
   s="Evolution of natural disasters\nbetween 1960 and 2023",
   size=15,
)
ax.text(x=1960, y=355, s="Data source: EM-DAT")
ax.legend(reverse=True, loc="center left")
ax.set_xticks([1960, 1980, 2000, 2020])
ax.set_yticks([100, 200, 300, 400])
ax.tick_params(length=0, pad=5)
ax.legend(frameon=False)
plt.show()
```


```{python}
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from pypalettes import load_cmap

url5 = "https://raw.githubusercontent.com/JosephBARBIERDARNAL/data-matplotlib-journey/refs/heads/main/newyork-airbnb/newyork-airbnb.csv"
df = pd.read_csv(url5)

df_agg = (
    df["neighbourhood"]
    .value_counts()
    .head(10)
    .to_frame(name="count")
    .reset_index()
    .rename(columns={"index": "neighbourhood"})
    .sort_values("count")
)
labels = df_agg["neighbourhood"]
values = df_agg["count"]
color_mapping = {True: "#2d8653", False: "#d6d6d6"}
colors = (labels == "Williamsburg").map(color_mapping)

fig, ax = plt.subplots(layout="tight")
ax.barh(labels, values, color = colors)
ax.spines[["top", "left", "bottom", "right"]].set_visible(False)
ax.tick_params(length=0)
ax.set_xticklabels([])

ax.text(
   x=3920 / 2,
   y=10.5,
   s="New York neighbourhood with the most Airbnbs",
   ha="center",
   va="top",
   size=14,
)
for i in range(len(values)):
   value = values[i]
   if i == 0:
      color = "white"
   else:
      color = "black"
   format_value = f"{value / 1000:.1f}k"
   ax.text(
      x=value - 350, y=len(values) - 1 - i, s=format_value, va="center", color=color
   )
plt.show()
# Here goes your code...
```

```{python}
import matplotlib.pyplot as plt
import pandas as pd


url6 = "https://raw.githubusercontent.com/JosephBARBIERDARNAL/data-matplotlib-journey/refs/heads/main/newyork-airbnb/newyork-airbnb.csv"
df = pd.read_csv(url6)

avg_global = df["price"].mean()

df_agg = (
  df.groupby("neighbourhood_group", as_index=False)["price"]
  .mean()
  .sort_values("price")
  .reset_index()
)

x = df_agg["price"]
y = df_agg["neighbourhood_group"]

fig, ax = plt.subplots(layout="tight")
ax.stem(y, x, orientation="horizontal", basefmt="green")
ax.set_xticks(list(range(0, 201, 20)))

ax.text(
  x=0,
  y=4.5,
  s="Average price per neighbourhood in New York Airbnbs",
  size=12,
)
ax.text(x=152 -10, y=3.5, s=f"Overall average: ${avg_global:.2f}")
ax.spines[["top", "left", "bottom", "right"]].set_visible(False)
ax.tick_params(length=0, pad=5)
ax.set_xticklabels([])
for i in range(len(y)):
   value = x[i]

   if i == 4:
      color = "blue"
   else:
      color = "black"
   format_value = f"${value:.2f}"
   ax.text(
      x=x[i] + 10, y=y[i], s=format_value, va="center", color=color
   )
plt.show()
```

```{python}
for i in range(len(y)):
   value = x[i]

   if i == 0:
      color = "blue"
   else:
      color = "black"
   format_value = f"${value:.2f}"
   ax.text(
      x=x[i], y=y[i], s=format_value, va="center", color=color
   )
```
```{python}




for i in range(len(neighbourhood_group)):
   value = x[i]
   if i == 0:
      color = "white"
   else:
      color = "black"
   format_value = f"{value / 1000:.1f}k"
   ax.text(
      x=value - 350, y=len(values) - 1 - i, s=format_value, va="center", color=color
   )
plt.show()
```