---
title: "matplotlib demo"
format:
  html:
    code-fold: true
    embed-resources: true
jupyter: python3
---



```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import json

import matplotlib.pyplot as plt
import pandas as pd

df_quebec = pd.read_csv("quebec.csv")
df_villes =  pd.read_csv("villes.csv")




print(plt.rcParams.keys())

```

## Visualisation Stroms data
## line plot

```{python}
df_quebec = df_quebec.sort_values('Indice_de_bonheur', ascending=True)
labels = df_quebec["Municipalité"]
values = df_quebec["Indice_de_bonheur"]
color_mapping = {True: "#2d8653", False: "#d6d6d6"}
colors = (labels == "Mont-Saint-Hilaire").map(color_mapping)


fig, ax = plt.subplots(layout="tight")

bars = ax.barh(labels, values, color = colors)
ax.spines[["top", "left", "bottom", "right"]].set_visible(False)
ax.tick_params(length=0)
ax.set_xticklabels([])
ax.set_yticklabels([])
for i, bar in enumerate(bars):
    width = bar.get_width()
    municipalite = df_quebec.iloc[i]["Municipalité"]
    value = df_quebec.iloc[i]["Indice_de_bonheur"]
    plt.text( y = bar.get_y() + bar.get_height()/2, x = 0, s=municipalite, ha = 'left', va='center', fontsize = 8, color='black')
    plt.text( y = bar.get_y() + bar.get_height()/2, x = width, s=value, ha = 'left', va='center', fontsize = 8, color='blue')

plt.show()


```

```{python}
import matplotlib.pyplot as plt
df_quebec = df_quebec.sort_values('Indice_de_bonheur', ascending=True)
df_villes = df_villes.sort_values('Indice_de_bonheur', ascending=True).reset_index(drop=True)
color_mapping = {True: "steelblue", False: "grey"}

# Créer la figure avec la taille spécifiée
fig, axs = plt.subplots(1,2,figsize=(10,12), layout="tight")
plt.subplots_adjust(wspace=0.8)
y_pos0 = range(1, len(df_quebec) + 1)
y_pos1 = range(1, len(df_villes) + 1)

# Créer le graphique lollipop horizontal
axs[0].hlines(y=y_pos0, xmin=0, xmax=df_quebec["Indice_de_bonheur"], color='skyblue')
axs[0].plot(df_quebec["Indice_de_bonheur"], y_pos, "o", color='steelblue')

labels = df_villes["Municipalité"]
values = df_villes["Indice_de_bonheur"]
regions = df_villes["Province"]
colors = (labels == "Montréal").map(color_mapping)

# Créer le graphique lollipop horizontal
axs[1].hlines(y=y_pos1, xmin=0, xmax=df_villes["Indice_de_bonheur"], color='grey')
axs[1].plot(df_villes["Indice_de_bonheur"], y_pos1, "o", color='grey')

# Ajouter les labels
for i in range(len(df_quebec)):
    municipalite = df_quebec.iloc[i]["Municipalité"]
    value = df_quebec.iloc[i]["Indice_de_bonheur"]
    axs[0].text(0, y_pos0[i]+0.2, municipalite, fontsize=12, color='steelblue')
    axs[0].text(value, y_pos0[i] +0.2, str(value), fontsize=12, color='steelblue', ha='right')



# Ajouter les labels
for i in range(len(df_villes)):
    axs[1].text(0, y_pos1[i]+0.1, labels[i]+", " + regions[i], fontsize=12, 
    color=colors[i])
    axs[1].text(values[i]-0.2, y_pos1[i]+0.1, str(values[i]), fontsize=12, color=colors[i])
# Enlever les bordures
axs[0].spines[["top", "left", "bottom", "right"]].set_visible(False)
axs[1].spines[["top", "left", "bottom", "right"]].set_visible(False)

# Ajouter le titre
axs[0].set_title("Top 50 QC: 26 municipalités de la CMM", loc='center')
axs[0].set_xticklabels([])
axs[0].set_yticklabels([])
axs[0].tick_params(length=0)
axs[1].set_xticklabels([])
axs[1].set_yticklabels([])
axs[1].tick_params(length=0)
axs[1].set_title("Top 10 grandes villes du canada", loc='center')

# Afficher le graphique
plt.show()

    
```


```{python}
import matplotlib.pyplot as plt
import numpy as np
from highlight_text import fig_text


df_quebec = df_quebec.sort_values('Indice_de_bonheur', ascending=True)
df_villes = df_villes.sort_values('Indice_de_bonheur', ascending=True).reset_index(drop=True)
color_mapping = {True: "steelblue", False: "grey"}

# Créer la figure avec la taille spécifiée
fig, axs = plt.subplots(1,2,figsize=(14,12), layout="tight")
plt.subplots_adjust(wspace=0.6, top=0.75)

y_pos0 = range(1, len(df_quebec) + 1)
y_pos1 = range(1, len(df_villes) + 1)

# Ajouter le titre principal
fig.suptitle("Top 50 du bonheur dans les villes du Québec : 26 municipalités proviennent de la CMM\net Montréal se classe 2e parmi les grandes villes canadiennes", 
             fontsize=14, fontweight='bold')

# Créer le graphique lollipop horizontal pour le Québec
axs[0].hlines(y=y_pos0, xmin=0, xmax=df_quebec["Indice_de_bonheur"], color='skyblue')
axs[0].plot(df_quebec["Indice_de_bonheur"], y_pos0, "o", color='steelblue')

# Préparer les données pour le graphique des grandes villes
labels = df_villes["Municipalité"]
values = df_villes["Indice_de_bonheur"]
regions = df_villes["Province"]
colors = (labels == "Montréal").map(color_mapping)

# Créer les lignes avec des couleurs différentes selon la ville
for i in range(len(df_villes)):
    color = 'skyblue' if labels[i] == "Montréal" else 'lightgrey'
    point_color = 'steelblue' if labels[i] == "Montréal" else 'grey'
    
    axs[1].hlines(y=y_pos1[i], xmin=0, xmax=values[i], color=color)
    axs[1].plot(values[i], y_pos1[i], "o", color=point_color)

# Ajouter les labels pour le Québec
for i in range(len(df_quebec)):
    municipalite = df_quebec.iloc[i]["Municipalité"]
    value = df_quebec.iloc[i]["Indice_de_bonheur"]
    axs[0].text(0, y_pos0[i]+0.2, municipalite, fontsize=12, color='steelblue')
    axs[0].text(value, y_pos0[i] +0.2, str(value), fontsize=12, color='steelblue', ha='right')

# Ajouter les labels pour les grandes villes
for i in range(len(df_villes)):
    text_color = 'steelblue' if labels[i] == "Montréal" else 'grey'
    axs[1].text(0, y_pos1[i]+0.1, labels[i]+", " + regions[i], fontsize=12, 
                color=text_color)
    axs[1].text(values[i]-0.2, y_pos1[i]+0.1, str(values[i]), fontsize=12, color=text_color)

# Enlever les bordures
axs[0].spines[["top", "left", "bottom", "right"]].set_visible(False)
axs[1].spines[["top", "left", "bottom", "right"]].set_visible(False)

# Ajouter les sous-titres alignés - UNE SEULE FOIS avec le même padding
axs[0].set_title("Top 50 QC : 26 municipalités de la CMM", fontsize=12)
axs[1].set_title("Top 10 grandes villes du Canada - Montréal 2e", fontsize=12)

# Nettoyer les axes
axs[0].set_xticklabels([])
axs[0].set_yticklabels([])
axs[0].tick_params(length=0)

axs[1].set_xticklabels([])
axs[1].set_yticklabels([])
axs[1].tick_params(length=0)
plt.tight_layout(rect=[0,0,1,0.95])
# Afficher le graphique

text = 'The iris dataset contains 3 species:\n<setosa>, <versicolor>, and <virginica>'
fig_text(
    s=text,
    x=.5, y=1,
    fontsize=20,
    color='black',
    highlight_textprops=[{"color": colors[0], 'fontweight': 'bold'},
                         {"color": colors[1], 'fontweight': 'bold'},
                         {"color": colors[2], 'fontweight': 'bold'}],
    ha='center'
)
plt.show()
```
labels = df_agg["neighbourhood"]
values = df_agg["count"]
color_mapping = {True: "#2d8653", False: "#d6d6d6"}
colors = (labels == "Williamsburg").map(color_mapping)

fig, ax = plt.subplots(layout="tight")
ax.barh(labels, values, color = colors)
ax.spines[["top", "left", "bottom", "right"]].set_visible(False)
ax.tick_params(length=0)
ax.set_xticklabels([])

ax.text(
   x=3920 / 2,
   y=10.5,
   s="New York neighbourhood with the most Airbnbs",
   ha="center",
   va="top",
   size=14,
)
for i in range(len(values)):
   value = values[i]
   if i == 0:
      color = "white"
   else:
      color = "black"
   format_value = f"{value / 1000:.1f}k"
   ax.text(
      x=value - 350, y=len(values) - 1 - i, s=format_value, va="center", color=color
   )
plt.show()

```{python}
import matplotlib.pyplot as plt

# Supposons que df_storms existe déjà

total_year = df_storms.groupby('year')["n"].sum()
grouped = df_storms.groupby("status")
df_storms_max = df_storms.sort_values(['status', 'n'], ascending=[True, False]) \
           .drop_duplicates(subset='status') \
           [['status', 'year', 'n']]
fig, ax = plt.subplots()

params = {
    "title": "Annual numbers of storms by status",
    "xlabel": "Year",
    "ylabel": "Number of storms",
    "xlim": [2010, 2022], 
    #"ylim": [0,400],
    "spines": {
        "top": False,
        "right": False
    },
    "ticks": {
        "top": False,
        "right": False
    },
    "legend": {
        "loc": "upper left",
        "frameon": False
    }
}

lines = []
nudge_y = [5,-8,5,5]
nudge_x = [0,0,0,0]
# Tracer les groupes
for i, (status, df_grouped) in enumerate(grouped):
    df_value = df_grouped.sort_values(["n"], ascending=[False]).head(1)
    line, = ax.plot(df_grouped["year"], df_grouped["n"], label=status.capitalize())
    lines.append(line)  # stocker l'objet Line2D
    ax.text(df_value["year"].iloc[0] + nudge_x[i],df_value["n"].iloc[0] + nudge_y[i], f"{int(df_value.iloc[0]["n"])}", color = line.get_color())
    

# Handlers pour appliquer les paramètres
handlers = {
    "title":   {"func": ax.set_title,  "kind": "single"},
    "xlabel":  {"func": ax.set_xlabel, "kind": "single"},
    "ylabel":  {"func": ax.set_ylabel, "kind": "single"},
    "xlim":    {"func": ax.set_xlim,   "kind": "args"},
    "ylim":    {"func": ax.set_ylim,   "kind": "args"},
    "legend":  {"func": ax.legend,     "kind": "kwargs"},
    "ticks":   {"func": ax.tick_params,"kind": "kwargs"}
}

legend = None  # pour pouvoir accéder à l’objet ensuite si nécessaire

for key, conf in handlers.items():
    if key in params:
        value = params[key]
        kind = conf["kind"]
        func = conf["func"]
        
        if kind == "single":
            func(value)
        elif kind == "args":
            func(*value)
        elif kind == "kwargs":
            result = func(**value)
            if key == "legend":
                legend = result  # capturer l'objet Legend

# Gérer les spines
for spine, visible in params.get("spines", {}).items():
    ax.spines[spine].set_visible(visible)

# Couleur du texte = couleur de la ligne
# Appliquer la couleur de la courbe au texte de la légende
for text, line in zip(legend.get_texts(), lines):
    text.set_color(line.get_color())

ymin, _ = ax.get_ylim()  # récupérer le min actuel
ax.set_ylim(ymin, 400)
ax.set_xticks(list(range(2010, 2023))) 
#plt.xticks(rotation=90)  # ou 90 si besoin
ax.tick_params(axis='x', labelsize=8)
plt.show()
```

je veux boxplot des lifexp par region
```{python}
df_clean = df_footprint.dropna(subset=["lifexp"])
region_means = df_clean.groupby("region")["lifexp"].mean()
regions_sorted = region_means.sort_values().index.tolist()

values = [df_clean[df_clean["region"] == region]["lifexp"] for region in regions_sorted]
fig, ax = plt.subplots()
params = {
    "title": "Life Esperance by region",
    "xlabel": "Years",
    "spines": {
        "top": False,
        "right": False,
        "left":False
    },
    "ticks": {
        "top": False,
        "right": False,
        "left":False
    }
}


# Handlers pour appliquer les paramètres
handlers = {
    "title":   {"func": ax.set_title,  "kind": "single"},
    "xlabel":  {"func": ax.set_xlabel, "kind": "single"},
    "ylabel":  {"func": ax.set_ylabel, "kind": "single"},
    "xlim":    {"func": ax.set_xlim,   "kind": "args"},
    "ylim":    {"func": ax.set_ylim,   "kind": "args"},
    "legend":  {"func": ax.legend,     "kind": "kwargs"},
    "ticks":   {"func": ax.tick_params,"kind": "kwargs"}
}

legend = None  # pour pouvoir accéder à l’objet ensuite si nécessaire

for key, conf in handlers.items():
    if key in params:
        value = params[key]
        kind = conf["kind"]
        func = conf["func"]
        
        if kind == "single":
            func(value)
        elif kind == "args":
            func(*value)
        elif kind == "kwargs":
            result = func(**value)
            if key == "legend":
                legend = result  # capturer l'objet Legend

# Gérer les spines
for spine, visible in params.get("spines", {}).items():
    ax.spines[spine].set_visible(visible)





ax.boxplot(values, labels = regions_sorted, vert = False)
plt.show()
```

import matplotlib.colors as mcolors

hsv_color = (0.01, .4, .8)
rgb_color = mcolors.hsv_to_rgb(hsv_color)

from pypalettes import load_cmap


```{python}
import pandas as pd

import matplotlib.pyplot as plt


pivot_df = df_storms.pivot_table(
  index="year",  # year is now the index
  columns="status",  # column are the kind of storm
  values="n",  # df content is taken from the 'n' column
)

fig, ax = plt.subplots()

for status in pivot_df["status"].unique():
  if status == "tropical storm":
      color = "#b75050"
  else:
      color = "lightgrey"
  ax.plot(pivot_df.index, pivot_df[status], color=color)

plt.show()
```


```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pypalettes import load_cmap




x = df_storms["year"].astype(int)
y = df_storms["n"]
c = df_storms["status"]
df_sum = df_storms.groupby("year", as_index=False)[["n"]].sum()

cmap = load_cmap("Acadia")

fig, ax = plt.subplots()
sns.lineplot(
  x=x, y=y, hue=c,
  palette=cmap.colors,
  ax=ax
)
plt.show()
```

![Elephant](chart_to_replicate.png)


```{python}
import matplotlib.pyplot as plt

    # Example using a list of lists
mosaic = [['A', 'A'],['A', 'A'],
              ['C', 'C'],
              ['C','C'],['C','C'],
              ['C','C']]

    # Example using string shorthand
    # mosaic = "AAB;CDB"
colors_C = ["blue", "black","orange","grey"]
fig, axs = plt.subplot_mosaic(mosaic,sharex=True)
sns.lineplot(
  x=x, y=y, hue=c,
  palette=colors_C,
  ax=axs['C']
)
min_val = df_sum["n"].min()
max_val = df_sum["n"].max()

colors = [
    "green" if val == min_val else 
    "red" if val == max_val else 
    "lightgrey" 
    for val in df_sum["n"]
]
axs['C'].legend().remove()
bars = axs["A"].bar(df_sum["year"].astype(int),df_sum["n"], 
color=colors)
axs["C"].spines[["top", "left","bottom"]].set_visible(False)
axs["A"].spines[["top", "right","left","bottom"]].set_visible(False)
axs["A"].set_yticklabels([])

axs['A'].tick_params(
    axis='both',
    length=0,
    labelright=False # enlève les labels à droite
)

for i, bar in enumerate(bars):
    height = bar.get_height()
    axs["A"].text(
        bar.get_x() + bar.get_width() / 2,  # centre de la barre
        height - (height * 0.1),                         # position au milieu de la 
        f'{int(height)}',                   # texte à afficher
        ha='center',
        va='top',                        # centre vertical
        color='white',                      # lisible si fond sombre
        fontsize=9
    )
axs['C'].text(2012,290,c[2].capitalize(),color =colors_C[2])
axs['C'].text(2017,220,c[0].capitalize(),color =colors_C[0])
axs['C'].text(2016,25,c[3].capitalize(),color =colors_C[3])
axs['C'].text(2010,80,c[1].capitalize(),color =colors_C[1])
axs['A'].text(2009,610,"Storms Totals", style='italic',fontfamily='serif')
axs['C'].text(2009,335,"Storms Trends by Type", style='italic',fontfamily='serif')
axs['C'].yaxis.tick_right()
axs['C'].set_xlim(2009, 2023)
axs['C'].set_ylim(0, 360)
axs['C'].set_xlabel('')
axs['C'].set_ylabel('')
axs['C'].spines['right'].set_position(('data', 2022))
axs['C'].set_yticks([50,100,150,200,250,300,350])
fig.subplots_adjust(wspace=.1, hspace=.1)
fig.text(0.05,0.95,"Storm Types Over Time 2010-2022",fontfamily='serif')

for label in axs["C"].get_xticklabels():
    if label.get_text() == "2014":
        label.set_color("green")
    elif label.get_text() == "2020":
        label.set_color("red")   
    else:
        label.set_color("black")  # optionnel : couleur par défaut
plt.show()
```
```{python}
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from pypalettes import load_cmap

df = df_desasters.copy()

columns = df.drop(columns="Year").sum().sort_values().index.to_list()
x = df["Year"]
y = np.stack(df[columns].values, axis=-1)

fig, ax = plt.subplots(figsize=(10, 5))

#stacked lineplot

ax.stackplot(x, y, labels=columns)
ax2 = ax.twinx()
ax.spines[["top", "left"]].set_visible(False)
ax2.spines[["top", "left"]].set_visible(False)

ax.set_xlim(1960, 2023)

ax.tick_params(
    axis='y',
    length=0,
    labelright=False # enlève les labels à droite
)
ax.set_title("Evolution of natural disasters", loc='left')
ax.set_yticklabels([])
ax2.set_ylim(ax.get_ylim())
ax.legend(loc="upper left", frameon=False)
plt.show()
# Here goes your code
```


```{python}
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from pypalettes import load_cmap



columns = df.drop(columns="Year").sum().sort_values().index.to_list()
x = df["Year"]
y = np.stack(df[columns].values, axis=-1)

fig, ax = plt.subplots(figsize=(10, 5))

colors = load_cmap("Antique").colors

ax.stackplot(x, y, colors=colors, labels=columns)
ax.set_xlim(1960, 2023)
ax.spines[["top", "left"]].set_visible(False)
ax.yaxis.tick_right()
ax.text(
   x=1960,
   y=380,
   s="Evolution of natural disasters\nbetween 1960 and 2023",
   size=15,
)
ax.text(x=1960, y=355, s="Data source: EM-DAT")
ax.legend(reverse=True, loc="center left")
ax.set_xticks([1960, 1980, 2000, 2020])
ax.set_yticks([100, 200, 300, 400])
ax.tick_params(length=0, pad=5)
ax.legend(frameon=False)
plt.show()
```


```{python}
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from pypalettes import load_cmap

url5 = "https://raw.githubusercontent.com/JosephBARBIERDARNAL/data-matplotlib-journey/refs/heads/main/newyork-airbnb/newyork-airbnb.csv"
df = pd.read_csv(url5)

df_agg = (
    df["neighbourhood"]
    .value_counts()
    .head(10)
    .to_frame(name="count")
    .reset_index()
    .rename(columns={"index": "neighbourhood"})
    .sort_values("count")
)
labels = df_agg["neighbourhood"]
values = df_agg["count"]
color_mapping = {True: "#2d8653", False: "#d6d6d6"}
colors = (labels == "Williamsburg").map(color_mapping)

fig, ax = plt.subplots(layout="tight")
ax.barh(labels, values, color = colors)
ax.spines[["top", "left", "bottom", "right"]].set_visible(False)
ax.tick_params(length=0)
ax.set_xticklabels([])

ax.text(
   x=3920 / 2,
   y=10.5,
   s="New York neighbourhood with the most Airbnbs",
   ha="center",
   va="top",
   size=14,
)
for i in range(len(values)):
   value = values[i]
   if i == 0:
      color = "white"
   else:
      color = "black"
   format_value = f"{value / 1000:.1f}k"
   ax.text(
      x=value - 350, y=len(values) - 1 - i, s=format_value, va="center", color=color
   )
plt.show()
# Here goes your code...
```

```{python}
import matplotlib.pyplot as plt
import pandas as pd


url6 = "https://raw.githubusercontent.com/JosephBARBIERDARNAL/data-matplotlib-journey/refs/heads/main/newyork-airbnb/newyork-airbnb.csv"
df = pd.read_csv(url6)

avg_global = df["price"].mean()

df_agg = (
  df.groupby("neighbourhood_group", as_index=False)["price"]
  .mean()
  .sort_values("price")
  .reset_index()
)

x = df_agg["price"]
y = df_agg["neighbourhood_group"]

fig, ax = plt.subplots(layout="tight")
ax.stem(y, x, orientation="horizontal", basefmt="green")
ax.set_xticks(list(range(0, 201, 20)))

ax.text(
  x=0,
  y=4.5,
  s="Average price per neighbourhood in New York Airbnbs",
  size=12,
)
ax.text(x=152 -10, y=3.5, s=f"Overall average: ${avg_global:.2f}")
ax.spines[["top", "left", "bottom", "right"]].set_visible(False)
ax.tick_params(length=0, pad=5)
ax.set_xticklabels([])
for i in range(len(y)):
   value = x[i]

   if i == 4:
      color = "blue"
   else:
      color = "black"
   format_value = f"${value:.2f}"
   ax.text(
      x=x[i] + 10, y=y[i], s=format_value, va="center", color=color
   )
plt.show()
```

```{python}
for i in range(len(y)):
   value = x[i]

   if i == 0:
      color = "blue"
   else:
      color = "black"
   format_value = f"${value:.2f}"
   ax.text(
      x=x[i], y=y[i], s=format_value, va="center", color=color
   )
```
```{python}




for i in range(len(neighbourhood_group)):
   value = x[i]
   if i == 0:
      color = "white"
   else:
      color = "black"
   format_value = f"{value / 1000:.1f}k"
   ax.text(
      x=value - 350, y=len(values) - 1 - i, s=format_value, va="center", color=color
   )
plt.show()
```

