---
title: "matplotlib demo"
format:
  html:
    code-fold: true
    embed-resources: true
jupyter: python3
---



```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import json
from pyfonts import load_font


import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from highlight_text import fig_text

df_quebec = pd.read_csv("quebec.csv")
df_villes =  pd.read_csv("villes.csv")




#print(plt.rcParams.keys())

```

## Visualisation Stroms data
## line plot

```{python}
df_quebec = df_quebec.sort_values('Indice_de_bonheur', ascending=True)
labels = df_quebec["Municipalité"]
values = df_quebec["Indice_de_bonheur"]
color_mapping = {True: "#2d8653", False: "#d6d6d6"}
colors = (labels == "Mont-Saint-Hilaire").map(color_mapping)

fig, ax = plt.subplots(figsize=(10, 12), layout="tight")

bars = ax.barh(labels, values, color=colors)

# Enlever les bordures et ticks
ax.spines[["top", "left", "bottom", "right"]].set_visible(False)
ax.tick_params(length=0)
ax.set_xticklabels([])
ax.set_yticklabels([])

# Ajuster les limites de l'axe x pour ne pas commencer à 0
min_val = values.min()
max_val = values.max()
ax.set_xlim(min_val - 1, max_val + 2)  # Un peu d'espace pour le texte

# Ajouter les labels
for i, bar in enumerate(bars):
    width = bar.get_width()
    municipalite = df_quebec.iloc[i]["Municipalité"]
    value = df_quebec.iloc[i]["Indice_de_bonheur"]
    
    # Nom de la municipalité à gauche
    ax.text(x=min_val -1 , y=bar.get_y() + bar.get_height()/2, 
            s=municipalite, ha='left', va='center', fontsize=8, color='black')
    
    # Valeur à droite de la barre
    ax.text(x=width + 0.1, y=bar.get_y() + bar.get_height()/2, 
            s=str(value), ha='left', va='center', fontsize=8, color='blue')

plt.tight_layout()
plt.show()
```
```{python}
df_quebec = df_quebec.sort_values('Indice_de_bonheur', ascending=True)
labels = df_quebec["Municipalité"]
values = df_quebec["Indice_de_bonheur"]
color_mapping = {True: "#2d8653", False: "#d6d6d6"}
colors = (labels == "Mont-Saint-Hilaire").map(color_mapping)


fig, ax = plt.subplots(layout="tight")

bars = ax.barh(labels, values, color = colors)
ax.spines[["top", "left", "bottom", "right"]].set_visible(False)
ax.tick_params(length=0)
ax.set_xticklabels([])
ax.set_yticklabels([])
for i, bar in enumerate(bars):
    width = bar.get_width()
    municipalite = df_quebec.iloc[i]["Municipalité"]
    value = df_quebec.iloc[i]["Indice_de_bonheur"]
    plt.text( y = bar.get_y() + bar.get_height()/2, x = 0, s=municipalite, ha = 'left', va='center', fontsize = 8, color='black')
    plt.text( y = bar.get_y() + bar.get_height()/2, x = width, s=value, ha = 'left', va='center', fontsize = 8, color='blue')

plt.show()


```


```{python}
import matplotlib.pyplot as plt
import numpy as np
from highlight_text import fig_text


df_quebec = df_quebec.sort_values('Indice_de_bonheur', ascending=True)
df_villes = df_villes.sort_values('Indice_de_bonheur', ascending=True).reset_index(drop=True)
color_mapping = {True: "steelblue", False: "grey"}

# Créer la figure avec la taille spécifiée
fig, axs = plt.subplots(1,2,figsize=(14,12), layout="tight")
plt.subplots_adjust(wspace=0.6, top=0.75)

y_pos0 = range(1, len(df_quebec) + 1)
y_pos1 = range(1, len(df_villes) + 1)

# Ajouter le titre principal
fig.suptitle("Top 50 du bonheur dans les villes du Québec : 26 municipalités proviennent de la CMM\net Montréal se classe 2e parmi les grandes villes canadiennes", 
             fontsize=14, fontweight='bold')

# Créer le graphique lollipop horizontal pour le Québec
axs[0].hlines(y=y_pos0, xmin=0, xmax=df_quebec["Indice_de_bonheur"], color='skyblue')
axs[0].plot(df_quebec["Indice_de_bonheur"], y_pos0, "o", color='steelblue')

# Préparer les données pour le graphique des grandes villes
labels = df_villes["Municipalité"]
values = df_villes["Indice_de_bonheur"]
regions = df_villes["Province"]
colors = (labels == "Montréal").map(color_mapping)

# Créer les lignes avec des couleurs différentes selon la ville
for i in range(len(df_villes)):
    color = 'skyblue' if labels[i] == "Montréal" else 'lightgrey'
    point_color = 'steelblue' if labels[i] == "Montréal" else 'grey'
    
    axs[1].hlines(y=y_pos1[i], xmin=0, xmax=values[i], color=color)
    axs[1].plot(values[i], y_pos1[i], "o", color=point_color)

# Ajouter les labels pour le Québec
for i in range(len(df_quebec)):
    municipalite = df_quebec.iloc[i]["Municipalité"]
    value = df_quebec.iloc[i]["Indice_de_bonheur"]
    axs[0].text(0, y_pos0[i]+0.2, municipalite, fontsize=12, color='steelblue')
    axs[0].text(value, y_pos0[i] +0.2, str(value), fontsize=12, color='steelblue', ha='right')

# Ajouter les labels pour les grandes villes
for i in range(len(df_villes)):
    text_color = 'steelblue' if labels[i] == "Montréal" else 'grey'
    axs[1].text(0, y_pos1[i]+0.1, labels[i]+", " + regions[i], fontsize=12, 
                color=text_color)
    axs[1].text(values[i]-0.2, y_pos1[i]+0.1, str(values[i]), fontsize=12, color=text_color)

# Enlever les bordures
axs[0].spines[["top", "left", "bottom", "right"]].set_visible(False)
axs[1].spines[["top", "left", "bottom", "right"]].set_visible(False)

# Ajouter les sous-titres alignés - UNE SEULE FOIS avec le même padding
axs[0].set_title("Top 50 QC : 26 municipalités de la CMM", fontsize=12)
axs[1].set_title("Top 10 grandes villes du Canada - Montréal 2e", fontsize=12)

# Nettoyer les axes
axs[0].set_xticklabels([])
axs[0].set_yticklabels([])
axs[0].tick_params(length=0)

axs[1].set_xticklabels([])
axs[1].set_yticklabels([])
axs[1].tick_params(length=0)
plt.tight_layout(rect=[0,0,1,0.95])
# Afficher le graphique

text = 'The iris dataset contains 3 species:\n<setosa>, <versicolor>, and <virginica>'
fig_text(
    s=text,
    x=.5, y=1,
    fontsize=20,
    color='black',
    highlight_textprops=[{"color": colors[0], 'fontweight': 'bold'},
                         {"color": colors[1], 'fontweight': 'bold'},
                         {"color": colors[2], 'fontweight': 'bold'}],
    ha='center'
)
plt.show()
```


```{python}

import matplotlib.pyplot as plt
import numpy as np
from highlight_text import fig_text
from highlight_text import ax_text
google_font = "https://github.com/google/fonts/blob/main"
bold = load_font(
    f"{google_font}/ofl/amaranth/Amaranth-Bold.ttf?raw=true"
)
regular = load_font(
    f"{google_font}/ofl/amaranth/Amaranth-Regular.ttf?raw=true"
)

df_quebec = df_quebec.sort_values('Indice_de_bonheur', ascending=True)
df_villes = df_villes.sort_values('Indice_de_bonheur', ascending=True).reset_index(drop=True)
color_mapping = {True: "steelblue", False: "grey"}

# Créer la figure avec la taille spécifiée
fig, axs = plt.subplots(1,2,figsize=(14,12), layout="tight")
plt.subplots_adjust(wspace=0.6, top=0.75)

y_pos0 = range(1, len(df_quebec) + 1)
y_pos1 = range(1, len(df_villes) + 1)

# Ajouter le titre principal
fig.suptitle("Top 50 du bonheur dans les villes du Québec : 26 municipalités proviennent de la CMM\net Montréal se classe 2e parmi les grandes villes canadiennes", 
             fontsize=24, font=bold)

# Créer le graphique lollipop horizontal pour le Québec
axs[0].hlines(y=y_pos0, xmin=0, xmax=df_quebec["Indice_de_bonheur"], color='skyblue')
axs[0].plot(df_quebec["Indice_de_bonheur"], y_pos0, "o", color='steelblue')

# Préparer les données pour le graphique des grandes villes
labels = df_villes["Municipalité"]
values = df_villes["Indice_de_bonheur"]
regions = df_villes["Province"]
colors = (labels == "Montréal").map(color_mapping)

# Créer les lignes avec des couleurs différentes selon la ville
for i in range(len(df_villes)):
    color = 'skyblue' if labels[i] == "Montréal" else 'lightgrey'
    point_color = 'steelblue' if labels[i] == "Montréal" else 'grey'
    
    axs[1].hlines(y=y_pos1[i], xmin=0, xmax=values[i], color=color)
    axs[1].plot(values[i], y_pos1[i], "o", color=point_color)

# Ajouter les labels pour le Québec
for i in range(len(df_quebec)):
    municipalite = df_quebec.iloc[i]["Municipalité"]
    value = df_quebec.iloc[i]["Indice_de_bonheur"]
    axs[0].text(0, y_pos0[i]+0.2, municipalite, fontsize=18, color='steelblue', font=regular)
    axs[0].text(value, y_pos0[i] +0.2, str(value), fontsize=18, color='steelblue', ha='right', font=regular)

# Ajouter les labels pour les grandes villes
for i in range(len(df_villes)):
    text_color = 'steelblue' if labels[i] == "Montréal" else 'grey'
    text_font = bold if labels[i] == "Montréal" else regular
    axs[1].text(0, y_pos1[i]+0.1, labels[i]+", " + regions[i], fontsize=24, 
                color=text_color,  font=text_font)
    axs[1].text(values[i], y_pos1[i]+0.1, str(values[i]), fontsize=24, color=text_color, font=text_font, ha='right')

# Enlever les bordures
axs[0].spines[["top", "left", "bottom", "right"]].set_visible(False)
axs[1].spines[["top", "left", "bottom", "right"]].set_visible(False)

# Ajouter les sous-titres alignés - UNE SEULE FOIS avec le même padding

# Nettoyer les axes
axs[0].set_xticklabels([])
axs[0].set_yticklabels([])
axs[0].tick_params(length=0)

axs[1].set_xticklabels([])
axs[1].set_yticklabels([])
axs[1].tick_params(length=0)
plt.tight_layout(rect=[0,0,1,0.95])
# Afficher le graphique


text = "Top 10 grandes villes du Canada - <Montreal 2e>"


ax_text(
    x=0,
    y=10+0.7,
    s=text,
highlight_textprops=[{"color": "steelblue", 'fontweight': 'bold'}],    size=22,
ax=axs[1], font=regular,va='center'
)
text = "Top 50 QC : 26 municipalités de la CMM"


ax_text(
    x=0,
    y=26+26*0.07,
    s=text,
   size=22,va='center',
ax=axs[0], font=regular
)

axs[0].axvline(x=72.4 ,color='grey', linestyle=':', linewidth=2,)

axs[1].axvline(x=68.7 ,color='grey', linestyle=':', linewidth=2)

axs[0].text(0.88, 0, 'Average QC 72.4', 
           transform=axs[0].transAxes,  # Coordonnées relatives
           size=16, 
           va='center', 
           ha='right',
           font=regular,
           color='darkgrey')

# Pour le graphique des grandes villes
axs[1].text(0.93, 0.0, 'Average Canada 68.3', 
           transform=axs[1].transAxes,  # Coordonnées relatives
           size=16, 
           va='center', 
           ha='right',
           font=regular,
           color='darkgrey')
plt.savefig('sine_wave_plot.png')
plt.show()

```