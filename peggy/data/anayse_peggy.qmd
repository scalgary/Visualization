---
title: "Peggy analysys"
format: html
---

```{python}
import os
os.listdir()
```

```{python}
import pandas as pd

from datetime import datetime, timedelta
```

```{python}
import pandas as pd
df = pd.read_csv('peggy.csv')
```

# 3 types de variables
keep_float -> easy one no issue
keep_easy_clean -> few values just remove <

```{python}
keep_float = ['LBP (µg/mL)','Vitamine D (ng/mL)']
keep_easy_clean = ['Homocystéine (µmol/L)']
```


```{python}
all_vars1 = keep_float + keep_easy_clean + ['Homa','PCR-US (mg/L)', 
'Ac anti-LDL oxydés (U/L)']

all_vars2 = keep_float + keep_easy_clean + ['Homa','PCR-US (mg/L)', 
'Ac anti-LDL oxydés (U/L)X1,06']

all_vars3 = keep_float + keep_easy_clean + ['Homa','PCR-US (mg/L)', 
'Ac anti-LDL oxydés (U/L)X1,24']

all_vars4 = keep_float + keep_easy_clean + ['Homa','PCR-US (mg/L)', 
'Ac anti-LDL oxydés (U/L)X1,48']
```

```{python}
all_vars1
for col in all_vars1:
    #print(df[col].dtype)
    print(col)
    print(df[col].min())
    print(df[col].max())
```



```{python}
import matplotlib.pyplot as plt
import numpy as np

# Vos 5 variables (ajustez les noms selon vos colonnes)

n = len(all_vars1)

colors = ['steelblue', 'orange', 'green', 'red', 'purple', 'grey', 'lightblue','lightblue','lightblue']


# Créer 5 subplots verticaux
fig, axes = plt.subplots(n, 1, figsize=(10, 15))
fig.suptitle(f'Distribution des {n} variables quantitatives', fontsize=16, fontweight='bold')
plt.subplots_adjust(hspace=0.6, top=0.90)

# Créer un histogramme pour chaque variable
for i, (ax, var) in enumerate(zip(axes, all_vars1)):
    ax.hist(df[var], bins=20, alpha=0.7, color=colors[i], edgecolor='white')
    ax.set_title(f'Distribution de {var}', fontsize=12)
    ax.set_ylabel('Fréquence')
    ax.grid(True, alpha=0.3)
    
    # Ajouter des statistiques
    mean_val = df[var].mean()
    ax.axvline(mean_val, color='red', linestyle='--', alpha=0.8, label=f'Moyenne: {mean_val:.2f}')
    ax.legend()
plt.savefig(f'results/distribution_{datetime.now().strftime('%Y-%m-%d')}.png')

```


```{python}
def calculate_descriptive_stats(df):
    """
    Calculate descriptive statistics for all numeric columns in a DataFrame
    Returns: DataFrame with min, max, mean, Q1, Q3 for each column
    """
    # Select only numeric columns
    numeric_df = df.select_dtypes(include=[np.number])
    
    # Calculate statistics
    stats_dict = {
        'Min': numeric_df.min(),
        'Q1': numeric_df.quantile(0.25),
        'Mediane' : numeric_df.median(),
        'Mean': numeric_df.mean(),
        'Q3': numeric_df.quantile(0.75),
        'Max': numeric_df.max(),
        'n' : numeric_df.count()
    }
    
    # Create DataFrame with statistics
    stats_df = pd.DataFrame(stats_dict)
    
    return stats_df

```


```{python}
a = calculate_descriptive_stats(df)
b = [pd.api.types.is_numeric_dtype(df[col]) for col in df.columns] 

a.to_csv(f'results/Peggy_descriptive_data_{datetime.now().strftime('%Y-%m-%d')}.csv')
```


```{python}
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import pearsonr

def check_by_var(all_vars, title):
    # Vos 5 variables
    variables = all_vars.copy()
    #variables.remove('TSH (mUI/L)')
    n_vars = len(variables)

    # Créer la matrice de subplots
    fig, axes = plt.subplots(n_vars, n_vars, figsize=(15, 15))
    plt.subplots_adjust(hspace=0, wspace=0)  # Ajustez ces valeurs selon vos besoins

    fig.suptitle('Matrice de corrélation - Variables quantitatives', fontsize=16)

    for i in range(n_vars):
        for j in range(n_vars):
            ax = axes[i, j]
            
            if i == j:
                data = df[variables[i]].dropna()
                
                # Créer l'histogramme
                ax.hist(data, bins=20, alpha=0.7, color='steelblue')
                ax.set_title(f'{variables[i]}', fontsize=10, fontweight='bold')
                
                # Calculer les statistiques
                mean_val = data.mean()
                median_val = data.median()
                q1 = data.quantile(0.25)
                q3 = data.quantile(0.75)
                pos_x = 0.45
                pos_y = 0.96
                # Ajouter seulement les valeurs textuelles (sans lignes)
                ax.text(pos_x, pos_y, f'Moyenne: {mean_val:.2f}', 
                    transform=ax.transAxes, fontsize=9, 
                    color='red', fontweight='bold', va='top')
                
                ax.text(pos_x, pos_y - 0.1, f'Médiane: {median_val:.2f}', 
                    transform=ax.transAxes, fontsize=9, 
                    color='blue', fontweight='bold', va='top')
                
                ax.text(pos_x, pos_y - 0.2, f'Q1: {q1:.2f}', 
                    transform=ax.transAxes, fontsize=9, 
                    color='orange', va='top')
                
                ax.text(pos_x, pos_y - 0.3, f'Q3: {q3:.2f}', 
                    transform=ax.transAxes, fontsize=9, 
                    color='orange', va='top')
            elif i > j:
                # Triangle inférieur: coefficients de corrélation et p-values
                
                # Calculer la corrélation et p-value
                correlation, p_value = pearsonr(df[variables[j]], df[variables[i]])
                
                # Enlever tous les éléments visuels
                ax.set_xticks([])
                ax.set_yticks([])
                ax.spines['top'].set_visible(False)
                ax.spines['right'].set_visible(False)
                ax.spines['bottom'].set_visible(False)
                ax.spines['left'].set_visible(False)
                
                # Couleur selon la force de la corrélation
                if abs(correlation) >= 0.7:
                    color = 'darkgreen'
                    weight = 'bold'
                elif abs(correlation) >= 0.5:
                    color = 'orange'
                    weight = 'bold'
                elif abs(correlation) >= 0.3:
                    color = 'red'
                    weight = 'normal'
                else:
                    color = 'gray'
                    weight = 'normal'
                
                # Afficher le coefficient de corrélation
                ax.text(0.5, 0.6, f'r = {correlation:.3f}', 
                    ha='center', va='center', fontsize=12, 
                    color=color, weight=weight, transform=ax.transAxes)
                
                # Afficher la p-value
                if p_value < 0.001:
                    p_text = 'p < 0.001'
                else:
                    p_text = f'p = {p_value:.3f}'
                    
                ax.text(0.5, 0.4, p_text, 
                    ha='center', va='center', fontsize=10, 
                    color='black', transform=ax.transAxes)
                
                # Ajouter un fond coloré selon la significativité
                if p_value < 0.05:
                    ax.set_facecolor('#f0f8ff')  # Bleu très clair pour significatif
                else:
                    ax.set_facecolor("lightgrey")  # Rouge très clair pour non significatif
                    
            else:
                # Triangle supérieur: scatterplot (i < j)
                correlation, p_value = pearsonr(df[variables[j]], df[variables[i]])

                # Couleur selon la significativité
                if p_value < 0.05:
                    scatter_color = 'steelblue'  # Bleu pour significatif
                    line_color = 'red'
                    alpha_scatter = 0.6
                    alpha_line = 0.8
                else:
                    scatter_color = 'lightgray'  # Gris clair pour non significatif
                    line_color = 'gray'
                    alpha_scatter = 0.4
                    alpha_line = 0.5
                
                ax.scatter(df[variables[j]], df[variables[i]], 
                        alpha=alpha_scatter, s=20, color=scatter_color)
                
                # Ajouter ligne de régression avec couleur conditionnelle
                z = np.polyfit(df[variables[j]], df[variables[i]], 1)
                p = np.poly1d(z)
                ax.plot(df[variables[j]], p(df[variables[j]]), 
                    color=line_color, linestyle='--', alpha=alpha_line)
            
            
            # Labels seulement pour les bords
            if i == n_vars - 1:  # Dernière ligne
                ax.set_xlabel(variables[j], fontsize=10)
            if j == 0:  # Première colonne
                ax.set_ylabel(variables[i], fontsize=10)
            
            # Nettoyer les axes pour tous sauf le triangle inférieur
            if not (i > j):
                ax.tick_params(labelsize=8)

    plt.tight_layout()
    plt.savefig(f'results/matrice_chart_{title}_{datetime.now().strftime('%Y-%m-%d')}.png')

    #plt.show()
    return plt


all_cases = [ all_vars1, all_vars2, all_vars3, all_vars4]
all_titles = [ 'Acanti-LDLoxydés', 'Acanti-LDLoxydésX1_06','Acanti-LDLoxydésX1_24','Acanti-LDLoxydésX1_48']
figures = [check_by_var(myvars, title) for myvars, title in zip(all_cases, all_titles)]

```


